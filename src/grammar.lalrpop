use crate::parser::{PdfNode, PageNode, ContentNode, TextNode, ResourceNode, FontNode, parse_attributes};

grammar;

pub Pdf: PdfNode = {
    "<pdf>" <page:Page> "</pdf>" => PdfNode { child_page: page },
};

Page: PageNode = {
    "<page>" <resource:Resource?> <content:Content> "</page>" <next:Page?> => PageNode {
        resources: resource,
        child_content: content,
        child_page: next.map(Box::new),
    },
};

Content: ContentNode = {
    "<content>" <texts:Text+> "</content>" => ContentNode { child_texts: texts },
};

Resource: ResourceNode = {
    "<resource>" <fonts:Font+> "</resource>" => ResourceNode { fonts: fonts },
};

Font: FontNode = {
    <open:r#"<font[^>]*/>"#> => FontNode {
        attributes: parse_attributes(open.trim_start_matches("<font").trim_end_matches("/>")),
    },
};

Text: TextNode = {
    <open:r#"<text[^>]*>"#> <s:r"[^<]*"> "</text>" => TextNode {
        child_string: s.trim().to_string(),
        attributes: parse_attributes(open.trim_start_matches("<text").trim_end_matches('>')),
    },
};
